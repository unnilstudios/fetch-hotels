!function(n){var t={};function e(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return n[o].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:o})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=1)}([function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reviewBox=t.errorBox=t.hotelBox=void 0;t.hotelBox=function(n,t,e,a,c,i,l,s,r,d,v){for(var u=o(a),h=o(c),f=v.length-1,p=(Math.floor(Math.random()*(f-v[0]+1)+v[0]),""),g=0;g<s;g+=1)p+='<i class="fa fa-star"></i>';return'\n      <div class="hotelBox" id="hotel_'.concat(n,'">\n        <div class="row">\n          <div class="col-lg-4 no-pad">\n            <div class="hotel_image">\n                <img src="').concat(v,'" class="img-fluid h_image" alt="hotel">\n            </div>\n        </div>\n        <div class="col-lg-8 no-pad">\n            <div class="hotel_details">\n                <div class="row">\n                    <div class="col-lg-9 ">\n                        <div class="row">\n                            <div class="col-lg-12 ">\n                               <h3 class="h_name float-left">\n\n                                  ').concat(t,'\n\n                                </h3>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-lg-12 "> \n                              <span class="h_location float-left">\n\n                                ').concat(r," - ").concat(d,'\n\n                              </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class="col-lg-3 "> \n                      <span class="h_rating float-right">\n\n                        ').concat(p,'\n\n                      </span>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-lg-12 ">\n                        <p class="h_description float-left">').concat(e,'</p>\n                    </div>\n                </div>\n            </div>\n            <div class="hotel_details">\n                <div class="row">\n                    <div class="col-lg-5 ">\n                        <button class="btn btn-secondary load_reviews" type="button" data-toggle="collapse" \n                        data-target="#review_').concat(n,'"\n                        id="loader_').concat(n,'"\n                        data-hotel-id="').concat(n,'"\n                        aria-expanded="false" aria-controls="#review_').concat(n,'"\n                        >Show Reviews</button>\n                    </div>\n                    <div class="col-lg-7 ">\n                        <div class="row">\n                            <div class="col-lg-12 ">\n                                 <h3 class="h_price float-right">\n\n                                    ').concat(i,'&#xA0;&#x20AC;\n\n                                  </h3>\n                            </div>\n                        </div>\n                        <div class="row">\n                            <div class="col-lg-12 "> \n                                <span class="h_dates float-right">\n\n                                  ').concat(u,"&#xA0;-&#xA0;").concat(h,'\n\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="col-lg-12 hotel_reviews no-pad">\n            <div id="review_').concat(n,'" class="reviewBox collapse col-lg-12"></div>\n        </div>\n    </div>\n</div>\n  ')};t.reviewBox=function(n,t,e,o){var a=1==o?"":"<hr>";return'\n        <div class="row">\n            <div class="col-lg-1"> \n              <span class="c_type float-right">\n\n                  '.concat(e?'<i class="fa fa-plus-circle positive"></i>':'<i class="fa fa-minus-circle negative"></i>','\n\n              </span>\n            </div>\n            <div class="col-lg-11">\n                <div class="row">\n                    <div class="col-lg-12"> <span class="commenter float-left">\n\n                        ').concat(n,'\n\n                      </span>\n                    </div>\n                </div>\n                <div class="row">\n                    <div class="col-lg-12">\n                        <p class="comment">').concat(t,"</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n      ").concat(a,"\n    ")};var o=function(n){return new Date(n).toLocaleDateString("de-DE",{day:"2-digit",month:"2-digit",year:"numeric"})};t.errorBox=function(){return'\n    <div class="alert alert-danger text-center" role="alert">\n      <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&#xD7;</span>\n    </button>An error occured</div>\n    '}},function(n,t,e){"use strict";var o=e(0);!function(n){n&&n.__esModule}(e(6));var a=function(n){var t="https://fake-hotel-api.herokuapp.com/api/reviews?hotel_id=".concat(n);fetch(t).then(function(n){return n.json()}).then(function(t){var e=t.reduce(function(n,e,a){var c=e.name,i=e.comment,l=e.positive;return n+=(0,o.reviewBox)(c,i,l,function(n,t){return t-1==n}(a,t.length))},"");console.log(e),$("#review_".concat(n)).html(e),$("#review_".concat(n)).collapse("show")}).catch(function(n){return n})};$(".load_hotels").on("click",function(n){n.preventDefault(),function(){null!==$(".api_error")&&$(".api_error").remove();fetch("https://fake-hotel-api.herokuapp.com/api/hotels?count=5").then(function(n){return n.json()}).then(function(n){var t=n.reduce(function(n,t){var e=t.id,a=t.name,c=t.description,i=t.date_start,l=t.date_end,s=t.price,r=t.rating,d=t.stars,v=t.city,u=t.country,h=t.images;return n+=(0,o.hotelBox)(e,a,c,i,l,s,r,d,v,u,h)},"");$(".hotel_list").html(t),$(".load_reviews").on("click",function(n){var t=$(n.target).data().hotelId;$("#review_".concat(t)).hasClass("in")?($("#review_".concat(t)).collapse("hide"),$("#loader_".concat(t)).html("Show Reviews")):(a(t),$("#loader_".concat(t)).html("Hide Reviews"))})}).catch(function(n){console.log(n);var t=(0,o.errorBox)();$(".hotel_list").html(t)})}()})},,,,,function(n,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,